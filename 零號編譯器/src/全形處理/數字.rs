pub fn _轉半形(字: char) -> char {
    match 字 {
        '０' => '0',
        '１' => '1',
        '２' => '2',
        '３' => '3',
        '４' => '4',
        '５' => '5',
        '６' => '6',
        '７' => '7',
        '８' => '8',
        '９' => '9',
        _ => {
            panic!("「{}」並非全形數字", 字);
        }
    }
}

pub fn 轉數(字: char) -> i64 {
    match 字 {
        '０' => 0,
        '１' => 1,
        '２' => 2,
        '３' => 3,
        '４' => 4,
        '５' => 5,
        '６' => 6,
        '７' => 7,
        '８' => 8,
        '９' => 9,
        _ => {
            panic!("「{}」並非全形數字", 字);
        }
    }
}

pub fn 字串轉整數(字串: &str) -> i64 {
    let mut 數 = 0;
    for 字 in 字串.chars() {
        數 *= 10;
        數 += 轉數(字);
    }

    數
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn 測試字串轉整數() {
        assert_eq!(字串轉整數("１２３４５６７８９０"), 1234567890);
    }
}
